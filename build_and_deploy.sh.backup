#!/bin/bash
# build_and_deploy.sh - Xregulator OTA Build and Deploy Script
# Usage: ./build_and_deploy.sh 2.1.0
# for your sanity, make the script argument (version) match whatever the ESP32 code has in <const char *FIRMWARE_VERSION =... >

set -e  # Exit on any error

# Configuration
PROJECT_PATH="/Users/joeceo/Documents/Arduino/Xregulator"
# FQBN="esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom,PSRAM=opi"
FQBN="esp32:esp32:esp32s3:FlashSize=16M,PartitionScheme=custom,PSRAM=opi,USBMode=hwcdc,CDCOnBoot=cdc"
PRIVATE_KEY="/Users/joeceo/private_key.pem"
SERVER_USER="root"
SERVER_HOST="host.xengineering.net"
SERVER_PATH="/home/ota/htdocs/ota.xengineering.net"
SERVER_PASS="a47H8IE0vgeEe5efgwe"

# Check arguments
if [ -z "$1" ]; then
    echo "‚ùå Usage: $0 <version>"
    echo "   Example: $0 2.1.0"
    exit 1
fi

VERSION="$1"
echo "üöÄ === XREGULATOR OTA BUILD & DEPLOY v$VERSION ==="

# Verify prerequisites
echo "üîç Checking prerequisites..."

if ! command -v arduino-cli &> /dev/null; then
    echo "‚ùå Arduino CLI not found. Install with: brew install arduino-cli"
    exit 1
fi

if [ ! -f "$PRIVATE_KEY" ]; then
    echo "‚ùå Private key not found at: $PRIVATE_KEY"
    exit 1
fi

if [ ! -d "$PROJECT_PATH" ]; then
    echo "‚ùå Project path not found: $PROJECT_PATH"
    exit 1
fi

if [ ! -d "$PROJECT_PATH/data" ]; then
    echo "‚ùå Web files folder not found: $PROJECT_PATH/data"
    exit 1
fi

if ! command -v sshpass &> /dev/null; then
    echo "üì¶ Installing sshpass for automated uploads..."
    brew install sshpass
fi

echo "‚úÖ All prerequisites met"

# Navigate to project
cd "$PROJECT_PATH"

# Clean previous builds and clear caches
echo "üßπ Cleaning previous builds and clearing caches..."
rm -rf build/ 2>/dev/null || true
rm -rf temp_package/ 2>/dev/null || true
rm -f firmware_*.tar 2>/dev/null || true
rm -f firmware_*.sig.* 2>/dev/null || true

# Clear Arduino CLI cache
echo "üóëÔ∏è Clearing Arduino CLI cache..."
arduino-cli cache clean

# Clear Arduino IDE cache (if it exists)
if [ -d "$HOME/Library/Arduino15/packages/esp32/hardware/esp32/cache" ]; then
    echo "üóëÔ∏è Clearing Arduino IDE cache..."
    rm -rf "$HOME/Library/Arduino15/packages/esp32/hardware/esp32/cache"
fi

# Clear any temporary build files
echo "üóëÔ∏è Clearing temporary build files..."
rm -rf /tmp/arduino_* 2>/dev/null || true

# Update version in firmware (optional - you can do this manually)
echo "‚ö†Ô∏è Remember to update FIRMWARE_VERSION in your code to \"$VERSION\""
echo "   Press Enter to continue, or Ctrl+C to abort..."
read -r

# Compile firmware with 16MB flash, custom partitions, and OPI PSRAM
echo "üî® Compiling firmware with 16MB flash, custom partitions, and OPI PSRAM..."
arduino-cli compile --fqbn "$FQBN" --output-dir ./build .

# Check if compilation succeeded
if [ ! -f "build/Xregulator.ino.bin" ]; then
    echo "‚ùå Compilation failed - .bin file not found"
    exit 1
fi

FIRMWARE_SIZE=$(wc -c < build/Xregulator.ino.bin)
echo "‚úÖ Firmware compiled: $FIRMWARE_SIZE bytes"

# Create package directory
echo "üì¶ Creating combined package..."
mkdir -p temp_package
cp build/Xregulator.ino.bin temp_package/firmware.bin

# Copy web files
if [ -d "data" ]; then
    cp -r data/* temp_package/
    echo "‚úÖ Web files added to package"
else
    echo "‚ö†Ô∏è No data folder found - firmware only package"
fi

# Create tar package (ustar format for streaming compatibility)
cd temp_package
tar --format=ustar -cf "../firmware_$VERSION.tar" .
cd ..
rm -rf temp_package

PACKAGE_SIZE=$(wc -c < "firmware_$VERSION.tar")
echo "‚úÖ Package created: firmware_$VERSION.tar ($PACKAGE_SIZE bytes)"

# Sign package
echo "‚úçÔ∏è Signing package with private key..."
openssl dgst -sha256 -sign "$PRIVATE_KEY" -out "firmware_$VERSION.sig.binary" "firmware_$VERSION.tar"

# Convert signature to base64 (single line)
base64 -i "firmware_$VERSION.sig.binary" | tr -d '\n' > "firmware_$VERSION.sig.base64"

SIGNATURE_LENGTH=$(wc -c < "firmware_$VERSION.sig.base64")
echo "‚úÖ Package signed: $SIGNATURE_LENGTH character signature"

# Verify signature length (should be 684-685 for RSA-4096)
if [ "$SIGNATURE_LENGTH" -lt 680 ] || [ "$SIGNATURE_LENGTH" -gt 690 ]; then
    echo "‚ö†Ô∏è Signature length $SIGNATURE_LENGTH seems unusual (expected 684-685)"
    echo "   Continue anyway? (y/n)"
    read -r response
    if [ "$response" != "y" ]; then
        exit 1
    fi
fi

# Upload files to server
echo "üåê Uploading to OTA server..."

# Upload firmware package
echo "   üì§ Uploading firmware package..."
sshpass -p "$SERVER_PASS" scp "firmware_$VERSION.tar" "$SERVER_USER@$SERVER_HOST:$SERVER_PATH/firmware/"

# Upload signature
echo "   üì§ Uploading signature..."
sshpass -p "$SERVER_PASS" ssh "$SERVER_USER@$SERVER_HOST" "echo '$(cat firmware_$VERSION.sig.base64)' > $SERVER_PATH/signatures/firmware_$VERSION.sig"

# Update server configuration
echo "   ‚öôÔ∏è Updating server version..."
sshpass -p "$SERVER_PASS" ssh "$SERVER_USER@$SERVER_HOST" "
    cd $SERVER_PATH
    sed -i \"s/CURRENT_FIRMWARE_VERSION', '[^']*'/CURRENT_FIRMWARE_VERSION', '$VERSION'/\" config/ota_config.php
    echo 'Server version updated to $VERSION'
    grep CURRENT_FIRMWARE_VERSION config/ota_config.php
"

# Clear rate limits for testing
echo "   üîÑ Clearing rate limits..."
sshpass -p "$SERVER_PASS" ssh "$SERVER_USER@$SERVER_HOST" "rm -f $SERVER_PATH/tmp/rate_limits.json"

# Verify upload
echo "üîç Verifying server deployment..."
sshpass -p "$SERVER_PASS" ssh "$SERVER_USER@$SERVER_HOST" "
    echo '=== Server File Check ==='
    ls -la $SERVER_PATH/firmware/firmware_$VERSION.tar
    echo 'Signature length:' \$(wc -c < $SERVER_PATH/signatures/firmware_$VERSION.sig)
    echo '=== Version Check ==='
    grep CURRENT_FIRMWARE_VERSION $SERVER_PATH/config/ota_config.php
"

# Test server response
echo "üß™ Testing server response..."
curl -s -H "Device-ID: TEST123" -H "Current-Version: 2.0.0" -H "Hardware-Version: ESP32-S3" https://ota.xengineering.net/api/firmware/check.php | python3 -m json.tool

# Cleanup local files
echo "üßπ Cleaning up local files..."
rm -f firmware_$VERSION.sig.binary
rm -f firmware_$VERSION.sig.base64
echo "   (Keeping firmware_$VERSION.tar for reference)"

echo ""
echo "üéâ === DEPLOYMENT COMPLETE ==="
echo "‚úÖ Version $VERSION is now live on the OTA server"
echo "‚úÖ Package size: $PACKAGE_SIZE bytes"
echo "‚úÖ Signature: $SIGNATURE_LENGTH characters"
echo "‚úÖ PSRAM: OPI PSRAM enabled in build"
echo ""
echo "üì± ESP32 devices will discover updates when manually checking"
echo "   (Automatic updates are disabled - manual user approval required)"
echo ""
echo "üîç Monitor device logs to confirm successful updates"